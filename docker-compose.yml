version: '3.8'

services:
  # PostgreSQL 15 with TimescaleDB extension (for audit events)
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: builtenvironment-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_DB: ${POSTGRES_DB:-builtenvironment}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - builtenvironment

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: builtenvironment-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme123} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - builtenvironment

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: builtenvironment-chromadb
    restart: unless-stopped
    ports:
      - "${CHROMA_PORT:-8000}:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      IS_PERSISTENT: "TRUE"
      PERSIST_DIRECTORY: /chroma/chroma
      ANONYMIZED_TELEMETRY: ${CHROMA_TELEMETRY:-FALSE}
      ALLOW_RESET: ${CHROMA_ALLOW_RESET:-TRUE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - builtenvironment

  # Langflow AI Workflow Orchestration
  langflow:
    image: langflowai/langflow:latest
    container_name: builtenvironment-langflow
    restart: unless-stopped
    environment:
      LANGFLOW_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/langflow
      LANGFLOW_CONFIG_DIR: /app/langflow
      LANGFLOW_AUTO_LOGIN: ${LANGFLOW_AUTO_LOGIN:-false}
      LANGFLOW_SUPERUSER: ${LANGFLOW_SUPERUSER:-admin@builtenvironment.ai}
      LANGFLOW_SUPERUSER_PASSWORD: ${LANGFLOW_SUPERUSER_PASSWORD:-changeme123}
    ports:
      - "${LANGFLOW_PORT:-7860}:7860"
    volumes:
      - langflow_data:/app/langflow
      - ./langflow/components:/app/langflow/custom_components:ro
      - ./langflow/flows:/app/langflow/flows:ro
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - builtenvironment

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: builtenvironment-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-builtenvironment}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme123}

      # ChromaDB
      CHROMA_HOST: chromadb
      CHROMA_PORT: 8000

      # Langflow
      LANGFLOW_URL: http://langflow:7860
      LANGFLOW_API_KEY: ${LANGFLOW_API_KEY}

      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}

      # JWT
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production-must-be-32-chars-minimum}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}

      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}

      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}

      # File Storage
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-104857600}

      # Email (optional for local dev)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM:-noreply@builtenvironment.ai}

    env_file:
      - .env
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      langflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - builtenvironment
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level info

  # React Frontend (uncomment when frontend is ready)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: builtenvironment-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8001}
      VITE_STRIPE_PUBLISHABLE_KEY: ${VITE_STRIPE_PUBLISHABLE_KEY}
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.vite
    depends_on:
      - backend
    networks:
      - builtenvironment
    command: npm run dev -- --host 0.0.0.0 --port 3000
    profiles:
      - with-frontend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  langflow_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  builtenvironment:
    driver: bridge
